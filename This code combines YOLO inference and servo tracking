import cv2
import RPi.GPIO as GPIO
import time
from ultralytics import YOLO

# ===== Servo Configuration =====
PAN_PIN = 17
TILT_PIN = 18

GPIO.setmode(GPIO.BCM)
GPIO.setup(PAN_PIN, GPIO.OUT)
GPIO.setup(TILT_PIN, GPIO.OUT)

pan_pwm = GPIO.PWM(PAN_PIN, 50)
tilt_pwm = GPIO.PWM(TILT_PIN, 50)

pan_pwm.start(7.5)   # Center position
tilt_pwm.start(7.5)  # Center position

# ===== YOLO Model Load =====
model = YOLO('best.pt')  # Path to your trained model

# ===== Frame Size =====
FRAME_WIDTH = 640
FRAME_HEIGHT = 480

# Start angles for pan and tilt
pan_angle = 90
tilt_angle = 90

# ===== Function to set servo angle =====
def set_angle(pwm, angle):
    duty_cycle = (angle / 18.0) + 2.5
    pwm.ChangeDutyCycle(duty_cycle)
    time.sleep(0.05)

# ===== Function to adjust pan and tilt based on bounding box position =====
def track_object(x_center, y_center):
    global pan_angle, tilt_angle

    # Error tolerance to avoid excessive movement
    TOLERANCE = 20
    
    # Compute error between center of frame and center of bounding box
    error_x = x_center - (FRAME_WIDTH / 2)
    error_y = y_center - (FRAME_HEIGHT / 2)

    if abs(error_x) > TOLERANCE:
        if error_x > 0:
            pan_angle -= 1
        else:
            pan_angle += 1

    if abs(error_y) > TOLERANCE:
        if error_y > 0:
            tilt_angle += 1
        else:
            tilt_angle -= 1

    # Limit angles to servo range (0 to 180)
    pan_angle = max(0, min(180, pan_angle))
    tilt_angle = max(0, min(180, tilt_angle))

    # Move servos
    set_angle(pan_pwm, pan_angle)
    set_angle(tilt_pwm, tilt_angle)

# ===== Open Camera =====
cap = cv2.VideoCapture(0)  # Use your USB camera

if not cap.isOpened():
    print("Error: Could not open camera.")
    exit()

try:
    while True:
        ret, frame = cap.read()
        if not ret:
            break
        
        # Resize frame to YOLO input size
        frame_resized = cv2.resize(frame, (416, 416))
        
        # Run YOLO inference
        results = model(frame_resized)[0]

        for r in results.boxes:
            x1, y1, x2, y2 = r.xyxy[0]
            conf = r.conf[0]
            cls = int(r.cls[0])

            if conf > 0.5:
                # Draw bounding box
                x_center = int((x1 + x2) / 2)
                y_center = int((y1 + y2) / 2)

                cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)
                cv2.putText(frame, f"Weed {conf:.2f}", (int(x1), int(y1) - 10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

                # Adjust pan and tilt based on bounding box position
                track_object(x_center, y_center)

        # Display the frame
        cv2.imshow("Weed Detection", frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

except KeyboardInterrupt:
    print("Stopping...")

finally:
    cap.release()
    cv2.destroyAllWindows()
    pan_pwm.stop()
    tilt_pwm.stop()
    GPIO.cleanup()
